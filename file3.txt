Reduces coll into a single value using an async iteratee to return each successive step. memo is the initial state of the reduction. This function only operates in series.

For performance reasons, it may make sense to split a call to this function into a parallel map, and then use the normal Array.prototype.reduce on the results. This function is for situations where each step in the reduction needs to be async; if you can get the data before reducing it, then it's probably a good idea to do so.

Alias:
foldl
Parameters:
Name	Type	Description
coll	Array | Iterable | AsyncIterable | Object	
A collection to iterate over.

memo	*	
The initial state of the reduction.

iteratee	AsyncFunction	
A function applied to each item in the array to produce the next step in the reduction. The iteratee should complete with the next state of the reduction. If the iteratee completes with an error, the reduction is stopped and the main callback is immediately called with the error. Invoked with (memo, item, callback).

callback	function <optional>	
A callback which is called after all the iteratee functions have finished. Result is the reduced value. Invoked with (err, result).

Returns:
a promise, if no callback is passed

Type Promise